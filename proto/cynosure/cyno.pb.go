// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cyno.proto

package cynosure

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Type is the kind of thing to match on.
type Filter_Type int32

const (
	// Namespace matches on the namespace of the process.
	Filter_Namespace Filter_Type = 0
	// Label matches on a label used to start a process (requires a `Filter.Key`).
	Filter_Label Filter_Type = 1
)

var Filter_Type_name = map[int32]string{
	0: "Namespace",
	1: "Label",
}

var Filter_Type_value = map[string]int32{
	"Namespace": 0,
	"Label":     1,
}

func (x Filter_Type) String() string {
	return proto.EnumName(Filter_Type_name, int32(x))
}

func (Filter_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{17, 0}
}

type Filter_Op int32

const (
	// In requires that at least one of the values match.
	Filter_In Filter_Op = 0
	// NotIn requires that none of the values are found.
	Filter_NotIn Filter_Op = 1
)

var Filter_Op_name = map[int32]string{
	0: "In",
	1: "NotIn",
}

var Filter_Op_value = map[string]int32{
	"In":    0,
	"NotIn": 1,
}

func (x Filter_Op) String() string {
	return proto.EnumName(Filter_Op_name, int32(x))
}

func (Filter_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{17, 1}
}

// State changes.
type Watch_State int32

const (
	// Unchanged does not change the state of the process (default).
	Watch_Unchanged Watch_State = 0
	// MakeReady changes the process state to ready, if not currently not-ready.
	Watch_MakeReady Watch_State = 1
	// NotReady changes the process state to not-ready, if currently ready.
	Watch_NotReady Watch_State = 2
)

var Watch_State_name = map[int32]string{
	0: "Unchanged",
	1: "MakeReady",
	2: "NotReady",
}

var Watch_State_value = map[string]int32{
	"Unchanged": 0,
	"MakeReady": 1,
	"NotReady":  2,
}

func (x Watch_State) String() string {
	return proto.EnumName(Watch_State_name, int32(x))
}

func (Watch_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{21, 0}
}

// RunningRequest is the input supplied to the `Running` API endpoint.
type RunningRequest struct {
	// Filters allow limiting the processes returned by this call (default = all).
	Filters              []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RunningRequest) Reset()         { *m = RunningRequest{} }
func (m *RunningRequest) String() string { return proto.CompactTextString(m) }
func (*RunningRequest) ProtoMessage()    {}
func (*RunningRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{0}
}

func (m *RunningRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunningRequest.Unmarshal(m, b)
}
func (m *RunningRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunningRequest.Marshal(b, m, deterministic)
}
func (m *RunningRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningRequest.Merge(m, src)
}
func (m *RunningRequest) XXX_Size() int {
	return xxx_messageInfo_RunningRequest.Size(m)
}
func (m *RunningRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunningRequest proto.InternalMessageInfo

func (m *RunningRequest) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// RunningResponse is the output supplied by the `Running` API endpoint.
type RunningResponse struct {
	// Processes contains the running processes that matched the request `Filter`.
	Processes            []*Process `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RunningResponse) Reset()         { *m = RunningResponse{} }
func (m *RunningResponse) String() string { return proto.CompactTextString(m) }
func (*RunningResponse) ProtoMessage()    {}
func (*RunningResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{1}
}

func (m *RunningResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunningResponse.Unmarshal(m, b)
}
func (m *RunningResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunningResponse.Marshal(b, m, deterministic)
}
func (m *RunningResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunningResponse.Merge(m, src)
}
func (m *RunningResponse) XXX_Size() int {
	return xxx_messageInfo_RunningResponse.Size(m)
}
func (m *RunningResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunningResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunningResponse proto.InternalMessageInfo

func (m *RunningResponse) GetProcesses() []*Process {
	if m != nil {
		return m.Processes
	}
	return nil
}

// InfoRequest is the input supplied to the `Info` API endpoint.
type InfoRequest struct {
	// Identifier of the process that should be interrogated.
	Identifier           string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{2}
}

func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

func (m *InfoRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

// InfoResponse is the output supplied by the `Info` API endpoint.
type InfoResponse struct {
	// Process contains the running process that matched the identifier.
	Process              *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{3}
}

func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoResponse.Unmarshal(m, b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return xxx_messageInfo_InfoResponse.Size(m)
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

// LogsRequest is the input supplied to the `Logs` API endpoint.
type LogsRequest struct {
	// Identifier of the process to get the logs for.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Head returns the top **N** log lines.
	Head int64 `protobuf:"varint,10,opt,name=head,proto3" json:"head,omitempty"`
	// Tail returns the bottom **N** log lines.
	Tail int64 `protobuf:"varint,11,opt,name=tail,proto3" json:"tail,omitempty"`
	// Since returns all log lines since the given UTC timestamp.
	//
	// Typically you will use the value from the previous `LogsResponse.Continue` field.
	Since                string   `protobuf:"bytes,12,opt,name=since,proto3" json:"since,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsRequest) Reset()         { *m = LogsRequest{} }
func (m *LogsRequest) String() string { return proto.CompactTextString(m) }
func (*LogsRequest) ProtoMessage()    {}
func (*LogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{4}
}

func (m *LogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsRequest.Unmarshal(m, b)
}
func (m *LogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsRequest.Marshal(b, m, deterministic)
}
func (m *LogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsRequest.Merge(m, src)
}
func (m *LogsRequest) XXX_Size() int {
	return xxx_messageInfo_LogsRequest.Size(m)
}
func (m *LogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogsRequest proto.InternalMessageInfo

func (m *LogsRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *LogsRequest) GetHead() int64 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *LogsRequest) GetTail() int64 {
	if m != nil {
		return m.Tail
	}
	return 0
}

func (m *LogsRequest) GetSince() string {
	if m != nil {
		return m.Since
	}
	return ""
}

// LogsResponse is the output supplied by the `Logs` API endpoint.
type LogsResponse struct {
	// Entries of the log as per the request
	Entries []*LogEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	// Count is the total number of log entries over the life of the process.
	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Continue can be provided as `LogRequest.Since` value to subsequent requests for log tailing.
	Continue             string   `protobuf:"bytes,3,opt,name=continue,proto3" json:"continue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogsResponse) Reset()         { *m = LogsResponse{} }
func (m *LogsResponse) String() string { return proto.CompactTextString(m) }
func (*LogsResponse) ProtoMessage()    {}
func (*LogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{5}
}

func (m *LogsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogsResponse.Unmarshal(m, b)
}
func (m *LogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogsResponse.Marshal(b, m, deterministic)
}
func (m *LogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogsResponse.Merge(m, src)
}
func (m *LogsResponse) XXX_Size() int {
	return xxx_messageInfo_LogsResponse.Size(m)
}
func (m *LogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogsResponse proto.InternalMessageInfo

func (m *LogsResponse) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *LogsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *LogsResponse) GetContinue() string {
	if m != nil {
		return m.Continue
	}
	return ""
}

// StartRequest is the input supplied to the `Start` API endpoint.
type StartRequest struct {
	// Command to run.
	Command *Command `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	// Namespace to run the command in.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Labels to assign to the process (allows filtering of processes).
	Labels []*KV `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	// Environments to run the command in (stacks environment variables).
	Environments []string `protobuf:"bytes,5,rep,name=environments,proto3" json:"environments,omitempty"`
	// Watches allow observation of key log entries and changing the process ready state.
	Watches              map[string]*Watch `protobuf:"bytes,10,rep,name=watches,proto3" json:"watches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StartRequest) Reset()         { *m = StartRequest{} }
func (m *StartRequest) String() string { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()    {}
func (*StartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{6}
}

func (m *StartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRequest.Unmarshal(m, b)
}
func (m *StartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRequest.Marshal(b, m, deterministic)
}
func (m *StartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRequest.Merge(m, src)
}
func (m *StartRequest) XXX_Size() int {
	return xxx_messageInfo_StartRequest.Size(m)
}
func (m *StartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRequest proto.InternalMessageInfo

func (m *StartRequest) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *StartRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StartRequest) GetLabels() []*KV {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *StartRequest) GetEnvironments() []string {
	if m != nil {
		return m.Environments
	}
	return nil
}

func (m *StartRequest) GetWatches() map[string]*Watch {
	if m != nil {
		return m.Watches
	}
	return nil
}

// StartResponse is the output supplied by the `Start` API endpoint.
type StartResponse struct {
	// Process contains the details of the process that was started.
	Process              *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartResponse) Reset()         { *m = StartResponse{} }
func (m *StartResponse) String() string { return proto.CompactTextString(m) }
func (*StartResponse) ProtoMessage()    {}
func (*StartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{7}
}

func (m *StartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartResponse.Unmarshal(m, b)
}
func (m *StartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartResponse.Marshal(b, m, deterministic)
}
func (m *StartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartResponse.Merge(m, src)
}
func (m *StartResponse) XXX_Size() int {
	return xxx_messageInfo_StartResponse.Size(m)
}
func (m *StartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartResponse proto.InternalMessageInfo

func (m *StartResponse) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

// StopRequest is the input supplied to the `Stop` API endpoint.
type StopRequest struct {
	// Identifier of the process to terminate.
	Identifier           string   `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopRequest) Reset()         { *m = StopRequest{} }
func (m *StopRequest) String() string { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()    {}
func (*StopRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{8}
}

func (m *StopRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopRequest.Unmarshal(m, b)
}
func (m *StopRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopRequest.Marshal(b, m, deterministic)
}
func (m *StopRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopRequest.Merge(m, src)
}
func (m *StopRequest) XXX_Size() int {
	return xxx_messageInfo_StopRequest.Size(m)
}
func (m *StopRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopRequest proto.InternalMessageInfo

func (m *StopRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

// StopResponse is the output supplied by the `Stop` API endpoint.
type StopResponse struct {
	// Success of the stop request.
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopResponse) Reset()         { *m = StopResponse{} }
func (m *StopResponse) String() string { return proto.CompactTextString(m) }
func (*StopResponse) ProtoMessage()    {}
func (*StopResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{9}
}

func (m *StopResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopResponse.Unmarshal(m, b)
}
func (m *StopResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopResponse.Marshal(b, m, deterministic)
}
func (m *StopResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopResponse.Merge(m, src)
}
func (m *StopResponse) XXX_Size() int {
	return xxx_messageInfo_StopResponse.Size(m)
}
func (m *StopResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopResponse proto.InternalMessageInfo

func (m *StopResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// EnvironmentRequest is the input supplied to the `Environment` API endpoint.
type EnvironmentRequest struct {
	// Name of the environment.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Values to provide for the namespace (`key=value`).
	Values               []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentRequest) Reset()         { *m = EnvironmentRequest{} }
func (m *EnvironmentRequest) String() string { return proto.CompactTextString(m) }
func (*EnvironmentRequest) ProtoMessage()    {}
func (*EnvironmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{10}
}

func (m *EnvironmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentRequest.Unmarshal(m, b)
}
func (m *EnvironmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentRequest.Marshal(b, m, deterministic)
}
func (m *EnvironmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentRequest.Merge(m, src)
}
func (m *EnvironmentRequest) XXX_Size() int {
	return xxx_messageInfo_EnvironmentRequest.Size(m)
}
func (m *EnvironmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentRequest proto.InternalMessageInfo

func (m *EnvironmentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvironmentRequest) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// EnvironmentResponse is the output supplied by the `Environment` API endpoint.
type EnvironmentResponse struct {
	// Success of the environment request.
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentResponse) Reset()         { *m = EnvironmentResponse{} }
func (m *EnvironmentResponse) String() string { return proto.CompactTextString(m) }
func (*EnvironmentResponse) ProtoMessage()    {}
func (*EnvironmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{11}
}

func (m *EnvironmentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentResponse.Unmarshal(m, b)
}
func (m *EnvironmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentResponse.Marshal(b, m, deterministic)
}
func (m *EnvironmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentResponse.Merge(m, src)
}
func (m *EnvironmentResponse) XXX_Size() int {
	return xxx_messageInfo_EnvironmentResponse.Size(m)
}
func (m *EnvironmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentResponse proto.InternalMessageInfo

func (m *EnvironmentResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// ImageRequest is the input supplied to the `Image` API endpoint.
type ImageRequest struct {
	// Identity of this image.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Image data (a tar.gz of the file system), if supplied creates the stored image.
	Image                []byte   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageRequest) Reset()         { *m = ImageRequest{} }
func (m *ImageRequest) String() string { return proto.CompactTextString(m) }
func (*ImageRequest) ProtoMessage()    {}
func (*ImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{12}
}

func (m *ImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageRequest.Unmarshal(m, b)
}
func (m *ImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageRequest.Marshal(b, m, deterministic)
}
func (m *ImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageRequest.Merge(m, src)
}
func (m *ImageRequest) XXX_Size() int {
	return xxx_messageInfo_ImageRequest.Size(m)
}
func (m *ImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImageRequest proto.InternalMessageInfo

func (m *ImageRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *ImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

// ImageResponse is the output supplied by the `Image` API endpoint.
type ImageResponse struct {
	// Exists if the image exists in the system.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	// Success if the image was created.
	Success              bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageResponse) Reset()         { *m = ImageResponse{} }
func (m *ImageResponse) String() string { return proto.CompactTextString(m) }
func (*ImageResponse) ProtoMessage()    {}
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{13}
}

func (m *ImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageResponse.Unmarshal(m, b)
}
func (m *ImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageResponse.Marshal(b, m, deterministic)
}
func (m *ImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageResponse.Merge(m, src)
}
func (m *ImageResponse) XXX_Size() int {
	return xxx_messageInfo_ImageResponse.Size(m)
}
func (m *ImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImageResponse proto.InternalMessageInfo

func (m *ImageResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *ImageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Command contains command information used to start a process and return information about a running command.
type Command struct {
	// Name will be used as the prefix for the identifier.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Image is the uploaded image file to use as the filesystem.
	Image string `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	// Entry is the command to execute as the entry-point.
	Entry string `protobuf:"bytes,11,opt,name=entry,proto3" json:"entry,omitempty"`
	// Args are supplied to the executable.
	Args []string `protobuf:"bytes,12,rep,name=args,proto3" json:"args,omitempty"`
	// Env provides extra environment variables.
	Env []string `protobuf:"bytes,13,rep,name=env,proto3" json:"env,omitempty"`
	// Requirements is a set of dependencies to be met before the command will be run.
	Requirements map[string]*Deps `protobuf:"bytes,14,rep,name=requirements,proto3" json:"requirements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Lines is the number of log entries that have been produced (read-only).
	Lines                int64    `protobuf:"varint,50,opt,name=lines,proto3" json:"lines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{14}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Command) GetEntry() string {
	if m != nil {
		return m.Entry
	}
	return ""
}

func (m *Command) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Command) GetEnv() []string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Command) GetRequirements() map[string]*Deps {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *Command) GetLines() int64 {
	if m != nil {
		return m.Lines
	}
	return 0
}

// Dep contains dependency requirements.
type Dep struct {
	// Identity of the broker to use, defined within the server configuration.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Wait is the thing to wait for, how it is interpreted/found is up to the provider.
	Wait                 string   `protobuf:"bytes,10,opt,name=wait,proto3" json:"wait,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Dep) Reset()         { *m = Dep{} }
func (m *Dep) String() string { return proto.CompactTextString(m) }
func (*Dep) ProtoMessage()    {}
func (*Dep) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{15}
}

func (m *Dep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Dep.Unmarshal(m, b)
}
func (m *Dep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Dep.Marshal(b, m, deterministic)
}
func (m *Dep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dep.Merge(m, src)
}
func (m *Dep) XXX_Size() int {
	return xxx_messageInfo_Dep.Size(m)
}
func (m *Dep) XXX_DiscardUnknown() {
	xxx_messageInfo_Dep.DiscardUnknown(m)
}

var xxx_messageInfo_Dep proto.InternalMessageInfo

func (m *Dep) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Dep) GetWait() string {
	if m != nil {
		return m.Wait
	}
	return ""
}

// Deps is a list of Dep entries, any of which can fulfil the requirement.
type Deps struct {
	// Deps is the list of `Dep` items.
	Deps                 []*Dep   `protobuf:"bytes,1,rep,name=deps,proto3" json:"deps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deps) Reset()         { *m = Deps{} }
func (m *Deps) String() string { return proto.CompactTextString(m) }
func (*Deps) ProtoMessage()    {}
func (*Deps) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{16}
}

func (m *Deps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deps.Unmarshal(m, b)
}
func (m *Deps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deps.Marshal(b, m, deterministic)
}
func (m *Deps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deps.Merge(m, src)
}
func (m *Deps) XXX_Size() int {
	return xxx_messageInfo_Deps.Size(m)
}
func (m *Deps) XXX_DiscardUnknown() {
	xxx_messageInfo_Deps.DiscardUnknown(m)
}

var xxx_messageInfo_Deps proto.InternalMessageInfo

func (m *Deps) GetDeps() []*Dep {
	if m != nil {
		return m.Deps
	}
	return nil
}

// Filter expresses how to match a `Process`.
type Filter struct {
	// Type of value to filter on.
	Type Filter_Type `protobuf:"varint,1,opt,name=type,proto3,enum=cynosure.Filter_Type" json:"type,omitempty"`
	// Op is the matching type.
	Op Filter_Op `protobuf:"varint,2,opt,name=op,proto3,enum=cynosure.Filter_Op" json:"op,omitempty"`
	// Values to match.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// Key to match on (type dependant).
	Key                  string   `protobuf:"bytes,10,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{17}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetType() Filter_Type {
	if m != nil {
		return m.Type
	}
	return Filter_Namespace
}

func (m *Filter) GetOp() Filter_Op {
	if m != nil {
		return m.Op
	}
	return Filter_In
}

func (m *Filter) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Filter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// KV is a simple key/value pair.
type KV struct {
	// Key of the value.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value of the key.
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KV) Reset()         { *m = KV{} }
func (m *KV) String() string { return proto.CompactTextString(m) }
func (*KV) ProtoMessage()    {}
func (*KV) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{18}
}

func (m *KV) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KV.Unmarshal(m, b)
}
func (m *KV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KV.Marshal(b, m, deterministic)
}
func (m *KV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KV.Merge(m, src)
}
func (m *KV) XXX_Size() int {
	return xxx_messageInfo_KV.Size(m)
}
func (m *KV) XXX_DiscardUnknown() {
	xxx_messageInfo_KV.DiscardUnknown(m)
}

var xxx_messageInfo_KV proto.InternalMessageInfo

func (m *KV) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KV) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LogEntry of a log line from a process.
type LogEntry struct {
	// Pos provides the line number for the log entry (starts at 1).
	Pos int64 `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
	// Time that the log entry was processed.
	Time string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Source of the log entry (`out`, `err`, `debug`, `info`, `warning`, `error`, `fatal`, etc).
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Raw contents of the log line.
	Raw string `protobuf:"bytes,4,opt,name=raw,proto3" json:"raw,omitempty"`
	// Message that was parsed out of the raw log line.
	Message string `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	// Fields that were parsed out of the raw log line.
	Fields               string   `protobuf:"bytes,11,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{19}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetPos() int64 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *LogEntry) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *LogEntry) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *LogEntry) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *LogEntry) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *LogEntry) GetFields() string {
	if m != nil {
		return m.Fields
	}
	return ""
}

// Process information to create a new process or return from a running process.
type Process struct {
	// Identifier is the unique ID that is assigned to this instance of the command.
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Namespace that the process is running in.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Pid is the process ID of the command.
	Pid int32 `protobuf:"varint,10,opt,name=pid,proto3" json:"pid,omitempty"`
	// Started time in milliseconds since epoch that the current PID started.
	Started int64 `protobuf:"varint,11,opt,name=started,proto3" json:"started,omitempty"`
	// Running duration in milliseconds that the process has been running.
	Running int64 `protobuf:"varint,12,opt,name=running,proto3" json:"running,omitempty"`
	// Ready is whether the process thinks it's ready (determined by watches on start).
	Ready bool `protobuf:"varint,13,opt,name=ready,proto3" json:"ready,omitempty"`
	// Command to run (or that is running)
	Command *Command `protobuf:"bytes,20,opt,name=command,proto3" json:"command,omitempty"`
	// Ports that are open (TCP/UDP for listening) by the process.
	Ports []string `protobuf:"bytes,21,rep,name=ports,proto3" json:"ports,omitempty"`
	// Observations that have been made by the `StartRequest.Watches` (which are supplied at start-up).
	Observations         map[string]string `protobuf:"bytes,22,rep,name=observations,proto3" json:"observations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{20}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Process) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Process) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Process) GetStarted() int64 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *Process) GetRunning() int64 {
	if m != nil {
		return m.Running
	}
	return 0
}

func (m *Process) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *Process) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *Process) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Process) GetObservations() map[string]string {
	if m != nil {
		return m.Observations
	}
	return nil
}

// Watch items enable observation of log lines and keep track of running state.
type Watch struct {
	// Match is a string to find in the output that triggers this watch.
	Match string `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// State determines whether this match will make the app ready, not, or do nothing.
	State                Watch_State `protobuf:"varint,2,opt,name=state,proto3,enum=cynosure.Watch_State" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Watch) Reset()         { *m = Watch{} }
func (m *Watch) String() string { return proto.CompactTextString(m) }
func (*Watch) ProtoMessage()    {}
func (*Watch) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf0ba7c91fc7e6c9, []int{21}
}

func (m *Watch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Watch.Unmarshal(m, b)
}
func (m *Watch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Watch.Marshal(b, m, deterministic)
}
func (m *Watch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watch.Merge(m, src)
}
func (m *Watch) XXX_Size() int {
	return xxx_messageInfo_Watch.Size(m)
}
func (m *Watch) XXX_DiscardUnknown() {
	xxx_messageInfo_Watch.DiscardUnknown(m)
}

var xxx_messageInfo_Watch proto.InternalMessageInfo

func (m *Watch) GetMatch() string {
	if m != nil {
		return m.Match
	}
	return ""
}

func (m *Watch) GetState() Watch_State {
	if m != nil {
		return m.State
	}
	return Watch_Unchanged
}

func init() {
	proto.RegisterEnum("cynosure.Filter_Type", Filter_Type_name, Filter_Type_value)
	proto.RegisterEnum("cynosure.Filter_Op", Filter_Op_name, Filter_Op_value)
	proto.RegisterEnum("cynosure.Watch_State", Watch_State_name, Watch_State_value)
	proto.RegisterType((*RunningRequest)(nil), "cynosure.RunningRequest")
	proto.RegisterType((*RunningResponse)(nil), "cynosure.RunningResponse")
	proto.RegisterType((*InfoRequest)(nil), "cynosure.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "cynosure.InfoResponse")
	proto.RegisterType((*LogsRequest)(nil), "cynosure.LogsRequest")
	proto.RegisterType((*LogsResponse)(nil), "cynosure.LogsResponse")
	proto.RegisterType((*StartRequest)(nil), "cynosure.StartRequest")
	proto.RegisterMapType((map[string]*Watch)(nil), "cynosure.StartRequest.WatchesEntry")
	proto.RegisterType((*StartResponse)(nil), "cynosure.StartResponse")
	proto.RegisterType((*StopRequest)(nil), "cynosure.StopRequest")
	proto.RegisterType((*StopResponse)(nil), "cynosure.StopResponse")
	proto.RegisterType((*EnvironmentRequest)(nil), "cynosure.EnvironmentRequest")
	proto.RegisterType((*EnvironmentResponse)(nil), "cynosure.EnvironmentResponse")
	proto.RegisterType((*ImageRequest)(nil), "cynosure.ImageRequest")
	proto.RegisterType((*ImageResponse)(nil), "cynosure.ImageResponse")
	proto.RegisterType((*Command)(nil), "cynosure.Command")
	proto.RegisterMapType((map[string]*Deps)(nil), "cynosure.Command.RequirementsEntry")
	proto.RegisterType((*Dep)(nil), "cynosure.Dep")
	proto.RegisterType((*Deps)(nil), "cynosure.Deps")
	proto.RegisterType((*Filter)(nil), "cynosure.Filter")
	proto.RegisterType((*KV)(nil), "cynosure.KV")
	proto.RegisterType((*LogEntry)(nil), "cynosure.LogEntry")
	proto.RegisterType((*Process)(nil), "cynosure.Process")
	proto.RegisterMapType((map[string]string)(nil), "cynosure.Process.ObservationsEntry")
	proto.RegisterType((*Watch)(nil), "cynosure.Watch")
}

func init() { proto.RegisterFile("cyno.proto", fileDescriptor_cf0ba7c91fc7e6c9) }

var fileDescriptor_cf0ba7c91fc7e6c9 = []byte{
	// 1353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0x13, 0xc7,
	0x17, 0xc7, 0x6b, 0x3b, 0x8e, 0x8f, 0x9d, 0x60, 0x86, 0xc4, 0xec, 0x7f, 0xff, 0xd0, 0x9a, 0x01,
	0xa4, 0x10, 0x88, 0xb7, 0x18, 0x21, 0x55, 0x81, 0xaa, 0xe5, 0xab, 0x34, 0x82, 0x26, 0x74, 0xa1,
	0x54, 0xe2, 0x6e, 0xb3, 0x9e, 0x6c, 0x56, 0xd8, 0x33, 0xcb, 0xce, 0x38, 0xa9, 0x85, 0xa2, 0x4a,
	0xbd, 0xee, 0x55, 0xfb, 0x00, 0xbd, 0xef, 0x4d, 0x9f, 0xa0, 0x4f, 0xd1, 0x57, 0xe8, 0x03, 0xf4,
	0x11, 0xaa, 0xf9, 0x58, 0xef, 0xf8, 0xa3, 0x10, 0xf5, 0xee, 0x9c, 0x39, 0xe7, 0xfc, 0x7e, 0x67,
	0xcf, 0x9c, 0x99, 0x33, 0x0b, 0x10, 0x8d, 0x29, 0xeb, 0xa6, 0x19, 0x13, 0x0c, 0x2d, 0x4b, 0x99,
	0x8f, 0x32, 0xe2, 0xdd, 0x54, 0x0b, 0xd1, 0x56, 0x4c, 0xe8, 0x16, 0x3f, 0x0e, 0xe3, 0x98, 0x64,
	0x3e, 0x4b, 0x45, 0xc2, 0x28, 0xf7, 0x43, 0x4a, 0x99, 0x08, 0x95, 0xac, 0xe3, 0xbc, 0x8b, 0x31,
	0x63, 0xf1, 0x80, 0xf8, 0x61, 0x9a, 0xcc, 0x5b, 0xf1, 0x3d, 0x58, 0x0d, 0x46, 0x94, 0x26, 0x34,
	0x0e, 0xc8, 0xdb, 0x11, 0xe1, 0x02, 0x6d, 0x42, 0xed, 0x20, 0x19, 0x08, 0x92, 0x71, 0xb7, 0xd4,
	0x29, 0x6f, 0x34, 0x7a, 0xad, 0x6e, 0xce, 0xdc, 0xfd, 0x52, 0x19, 0x82, 0xdc, 0x01, 0x3f, 0x80,
	0xb3, 0x93, 0x68, 0x9e, 0x32, 0xca, 0x09, 0xf2, 0xa1, 0x9e, 0x66, 0x2c, 0x22, 0x9c, 0x93, 0x1c,
	0xe0, 0x5c, 0x01, 0xf0, 0x5c, 0x9b, 0x82, 0xc2, 0x07, 0x6f, 0x41, 0x63, 0x87, 0x1e, 0xb0, 0x9c,
	0xfe, 0x23, 0x80, 0xa4, 0x4f, 0xa8, 0x48, 0x0e, 0x12, 0x92, 0xb9, 0xa5, 0x4e, 0x69, 0xa3, 0x1e,
	0x58, 0x2b, 0xf8, 0x2e, 0x34, 0xb5, 0xbb, 0xe1, 0xbb, 0x01, 0x35, 0x83, 0xa5, 0x9c, 0x17, 0xb2,
	0xe5, 0x1e, 0xf8, 0x0d, 0x34, 0x9e, 0xb1, 0x98, 0x9f, 0x92, 0x0b, 0x21, 0xa8, 0x1c, 0x92, 0xb0,
	0xef, 0x42, 0xa7, 0xb4, 0x51, 0x0e, 0x94, 0x2c, 0xd7, 0x44, 0x98, 0x0c, 0xdc, 0x86, 0x5e, 0x93,
	0x32, 0x5a, 0x83, 0x2a, 0x4f, 0x68, 0x44, 0xdc, 0xa6, 0x82, 0xd0, 0x0a, 0xa6, 0xd0, 0xd4, 0x64,
	0x26, 0xd3, 0x9b, 0x50, 0x23, 0x54, 0x64, 0xc9, 0xa4, 0x2e, 0xa8, 0xc8, 0xf4, 0x19, 0x8b, 0x1f,
	0x53, 0x91, 0x8d, 0x83, 0xdc, 0x45, 0x62, 0x46, 0x6c, 0x44, 0x85, 0xeb, 0x28, 0x22, 0xad, 0x20,
	0x0f, 0x96, 0x23, 0x46, 0x45, 0x42, 0x47, 0xc4, 0x2d, 0x2b, 0xb2, 0x89, 0x8e, 0x7f, 0x77, 0xa0,
	0xf9, 0x42, 0x84, 0x99, 0xc8, 0x3f, 0xef, 0x06, 0xd4, 0x22, 0x36, 0x1c, 0x86, 0xb4, 0x3f, 0x5f,
	0x9a, 0x87, 0xda, 0x10, 0xe4, 0x1e, 0xe8, 0x22, 0xd4, 0x69, 0x38, 0x24, 0x3c, 0x0d, 0x23, 0xa2,
	0x38, 0xeb, 0x41, 0xb1, 0x80, 0xae, 0xc2, 0xd2, 0x20, 0xdc, 0x27, 0x03, 0xee, 0x96, 0x55, 0xea,
	0xcd, 0x02, 0xe9, 0xe9, 0xab, 0xc0, 0xd8, 0x10, 0x86, 0x26, 0xa1, 0x47, 0x49, 0xc6, 0xe8, 0x90,
	0x50, 0xc1, 0xdd, 0x6a, 0xa7, 0xbc, 0x51, 0x0f, 0xa6, 0xd6, 0xd0, 0x67, 0x50, 0x3b, 0x0e, 0x45,
	0x74, 0x48, 0xb8, 0x0b, 0x0a, 0xea, 0x4a, 0x01, 0x65, 0x67, 0xdf, 0xfd, 0x4e, 0x7b, 0x99, 0xb2,
	0x98, 0x18, 0xef, 0x29, 0x34, 0x6d, 0x03, 0x6a, 0x41, 0xf9, 0x0d, 0x19, 0x9b, 0xbd, 0x93, 0x22,
	0xba, 0x06, 0xd5, 0xa3, 0x70, 0x30, 0xd2, 0x1f, 0xd1, 0xe8, 0x9d, 0x2d, 0xe0, 0x55, 0x60, 0xa0,
	0xad, 0xdb, 0xce, 0xa7, 0x25, 0x7c, 0x0f, 0x56, 0x0c, 0xe5, 0x7f, 0x69, 0xa6, 0x2d, 0x68, 0xbc,
	0x10, 0x2c, 0x3d, 0x6d, 0xe3, 0x6e, 0xc8, 0xdd, 0x91, 0xee, 0x86, 0xcb, 0x85, 0x1a, 0x1f, 0x45,
	0x13, 0xae, 0xe5, 0x20, 0x57, 0xf1, 0x17, 0x80, 0x1e, 0x17, 0x25, 0xcb, 0xf1, 0x11, 0x54, 0xe4,
	0x7e, 0x18, 0x64, 0x25, 0xa3, 0x36, 0x2c, 0xa9, 0xaf, 0xe1, 0xae, 0xa3, 0x4a, 0x6d, 0x34, 0xec,
	0xc3, 0xf9, 0x29, 0x84, 0x53, 0x50, 0x36, 0x77, 0x86, 0x61, 0x4c, 0x72, 0x32, 0x0f, 0x96, 0x75,
	0xea, 0x22, 0xaf, 0xed, 0x44, 0x97, 0x9d, 0x99, 0x48, 0x5f, 0x55, 0xe0, 0x66, 0xa0, 0x15, 0x7c,
	0x1f, 0x56, 0x0c, 0x82, 0x21, 0x6b, 0xc3, 0x12, 0xf9, 0x3e, 0xe1, 0x22, 0xe7, 0x32, 0x9a, 0x9d,
	0x84, 0x33, 0x9d, 0xc4, 0xaf, 0x0e, 0xd4, 0x4c, 0x5f, 0x2e, 0xfc, 0xda, 0x09, 0x31, 0xe8, 0x63,
	0xa6, 0x14, 0xb9, 0x2a, 0xcf, 0xcc, 0x58, 0x9d, 0xc8, 0x7a, 0xa0, 0x15, 0x19, 0x1f, 0x66, 0x31,
	0x77, 0x9b, 0xaa, 0x2e, 0x4a, 0x96, 0xbd, 0x42, 0xe8, 0x91, 0xbb, 0xa2, 0x96, 0xa4, 0x88, 0x9e,
	0x40, 0x33, 0x23, 0x6f, 0x47, 0x49, 0x46, 0x74, 0xc3, 0xae, 0xce, 0x76, 0xa4, 0x49, 0xa7, 0x1b,
	0x58, 0x5e, 0xba, 0x23, 0xa7, 0x02, 0x65, 0x12, 0x83, 0x84, 0x12, 0xee, 0xf6, 0xf4, 0x69, 0x55,
	0x8a, 0xb7, 0x07, 0xe7, 0xe6, 0x02, 0x17, 0x74, 0xec, 0xd5, 0xe9, 0x8e, 0x5d, 0x2d, 0xe8, 0x1f,
	0x91, 0x94, 0xdb, 0x0d, 0x7b, 0x07, 0xca, 0x8f, 0x48, 0xfa, 0xde, 0xdd, 0x41, 0x50, 0x39, 0x0e,
	0x13, 0x61, 0x6a, 0xa4, 0x64, 0x7c, 0x1d, 0x2a, 0x12, 0x09, 0x5d, 0x86, 0x4a, 0x9f, 0xa4, 0xf9,
	0xf5, 0xb3, 0x32, 0xc5, 0x13, 0x28, 0x13, 0xfe, 0xa3, 0x04, 0x4b, 0xfa, 0x96, 0x47, 0xd7, 0xa1,
	0x22, 0xc6, 0xa9, 0xde, 0x82, 0xd5, 0xde, 0xfa, 0xec, 0x14, 0xe8, 0xbe, 0x1c, 0xa7, 0x24, 0x50,
	0x2e, 0xe8, 0x0a, 0x38, 0x2c, 0x55, 0xe9, 0xaf, 0xf6, 0xce, 0xcf, 0x39, 0xee, 0xa5, 0x81, 0xc3,
	0x52, 0xab, 0x59, 0xcb, 0x76, 0xb3, 0xe6, 0x05, 0x81, 0x49, 0x41, 0x70, 0x07, 0x2a, 0x12, 0x1c,
	0xad, 0x40, 0x7d, 0x37, 0xbf, 0x82, 0x5a, 0x67, 0x50, 0x1d, 0xaa, 0xcf, 0xe4, 0x45, 0xd3, 0x2a,
	0xe1, 0x0b, 0xe0, 0xec, 0xa5, 0x68, 0x09, 0x9c, 0x1d, 0xaa, 0x0d, 0xbb, 0x4c, 0xec, 0xd0, 0x56,
	0x09, 0xdf, 0x04, 0xe7, 0xe9, 0xab, 0x05, 0x35, 0x5e, 0xb3, 0x6b, 0x5c, 0x37, 0x35, 0xc5, 0x3f,
	0x95, 0x60, 0x39, 0xbf, 0x7a, 0x65, 0x50, 0xca, 0x74, 0xb7, 0x96, 0x03, 0x29, 0xaa, 0xbb, 0x3e,
	0x19, 0xe6, 0x31, 0x4a, 0x96, 0x5f, 0xc1, 0xd9, 0x28, 0x8b, 0xf2, 0xfb, 0xd7, 0x68, 0x32, 0x3a,
	0x0b, 0x8f, 0xdd, 0x8a, 0xa6, 0xcc, 0xc2, 0x63, 0xd9, 0xe8, 0x43, 0xc2, 0x79, 0xd1, 0xb0, 0xb9,
	0x2a, 0x31, 0x0e, 0x12, 0x32, 0xe8, 0x73, 0xd3, 0xb3, 0x46, 0xc3, 0x7f, 0x3b, 0x50, 0x33, 0xd7,
	0xcc, 0x07, 0x67, 0xd3, 0xfb, 0xef, 0x6b, 0xf9, 0x2d, 0x89, 0x1e, 0x5c, 0xd5, 0x40, 0x8a, 0xea,
	0xd8, 0xc9, 0xbb, 0x8e, 0xf4, 0xcd, 0xe8, 0xca, 0x55, 0x69, 0xc9, 0xf4, 0x10, 0x57, 0xf3, 0xab,
	0x1c, 0xe4, 0xaa, 0x2c, 0x5a, 0x46, 0xc2, 0xfe, 0xd8, 0x5d, 0x51, 0x07, 0x55, 0x2b, 0xf6, 0x58,
	0x59, 0xfb, 0xe0, 0x58, 0x59, 0x83, 0x6a, 0xca, 0x32, 0xc1, 0xdd, 0x75, 0xb5, 0xe7, 0x5a, 0x91,
	0xe7, 0x8e, 0xed, 0x73, 0x92, 0x1d, 0xe9, 0xb7, 0x88, 0xdb, 0x9e, 0x3d, 0x77, 0xa6, 0x0a, 0xdd,
	0x3d, 0xcb, 0xcb, 0x9c, 0x3b, 0x3b, 0xd0, 0xfb, 0x1c, 0xce, 0xcd, 0xb9, 0x9c, 0x76, 0xf7, 0xd5,
	0x89, 0xfa, 0x01, 0xaa, 0x6a, 0x2c, 0x48, 0x97, 0xa1, 0x14, 0x4c, 0x98, 0x56, 0xd0, 0x0d, 0xa8,
	0x72, 0x11, 0x0a, 0x62, 0x7a, 0x7b, 0x7d, 0x66, 0x98, 0xc8, 0x89, 0x25, 0x48, 0xa0, 0x7d, 0xf0,
	0x6d, 0xa8, 0x2a, 0x5d, 0xf6, 0xed, 0xb7, 0x34, 0x3a, 0x0c, 0x69, 0x4c, 0xfa, 0xad, 0x33, 0x52,
	0xfd, 0x3a, 0x7c, 0x43, 0x02, 0x59, 0xbd, 0x56, 0x09, 0x35, 0x61, 0x79, 0x97, 0x09, 0xad, 0x39,
	0xbd, 0xdf, 0xaa, 0x50, 0xbe, 0xff, 0x7c, 0x07, 0x11, 0xa8, 0x99, 0xa7, 0x14, 0x72, 0x0b, 0x96,
	0xe9, 0xb7, 0x99, 0xf7, 0xbf, 0x05, 0x16, 0x7d, 0xdd, 0xe2, 0x6b, 0x3f, 0xfe, 0xf9, 0xd7, 0x2f,
	0xce, 0xc7, 0xa8, 0xe1, 0x1f, 0xdd, 0xf2, 0xcd, 0x06, 0xbe, 0x6e, 0x61, 0x5b, 0xdd, 0x2e, 0x6d,
	0xa2, 0x97, 0x50, 0x91, 0xcf, 0x27, 0x64, 0x7d, 0x89, 0xf5, 0xfa, 0xf2, 0xda, 0xb3, 0xcb, 0x06,
	0xfd, 0x92, 0x42, 0xbf, 0x80, 0xd6, 0x25, 0x5c, 0x42, 0x0f, 0x98, 0xff, 0xae, 0xe8, 0xc5, 0x13,
	0x89, 0x2a, 0x9f, 0x3a, 0x36, 0xaa, 0xf5, 0xce, 0xb2, 0x51, 0xed, 0x17, 0xd1, 0x34, 0xea, 0x80,
	0xc5, 0x7c, 0x16, 0xb5, 0xaa, 0xc6, 0x33, 0x6a, 0x2f, 0x7e, 0x22, 0x78, 0x17, 0xe6, 0xd6, 0x0d,
	0xb0, 0xa7, 0x80, 0xd7, 0x70, 0x5d, 0x02, 0xab, 0x3e, 0xdf, 0x9e, 0x74, 0xe4, 0x4b, 0xa8, 0xc8,
	0x39, 0x6c, 0xe7, 0x6a, 0x8d, 0x71, 0xaf, 0x3d, 0xbb, 0x3c, 0x9d, 0xeb, 0xe6, 0xba, 0x86, 0x64,
	0xe9, 0x74, 0xae, 0x43, 0x68, 0x58, 0x13, 0x17, 0x5d, 0x2c, 0x50, 0xe6, 0x47, 0xb9, 0x77, 0xe9,
	0x5f, 0xac, 0x86, 0xea, 0xb2, 0xa2, 0xfa, 0x3f, 0x6e, 0x4b, 0x2a, 0xeb, 0xf1, 0xe4, 0xbf, 0x93,
	0x07, 0xfc, 0x44, 0x6e, 0xe3, 0x08, 0xaa, 0x6a, 0xda, 0xda, 0xa5, 0xb1, 0x07, 0xb8, 0x5d, 0x9a,
	0xa9, 0xb1, 0x8c, 0xef, 0x2a, 0xf0, 0x3b, 0x68, 0x4d, 0xed, 0xa4, 0x34, 0xe5, 0x1f, 0x22, 0xc6,
	0x27, 0xaf, 0x2f, 0xe1, 0x85, 0xeb, 0xdb, 0x7a, 0xd6, 0x3e, 0xf8, 0xe6, 0xe7, 0xfb, 0xbb, 0xa8,
	0xda, 0x2b, 0xdf, 0xea, 0x7e, 0xb2, 0x59, 0x72, 0xb2, 0x07, 0xe0, 0x3d, 0x34, 0x2c, 0x9d, 0x27,
	0x89, 0xf8, 0x6a, 0xb4, 0xdf, 0xc9, 0x48, 0xca, 0x78, 0x22, 0x58, 0x36, 0x46, 0x57, 0x0f, 0x85,
	0x48, 0xf9, 0xb6, 0xef, 0xc7, 0x89, 0x38, 0x1c, 0xed, 0x77, 0x23, 0x36, 0xf4, 0x29, 0xcb, 0xe2,
	0x90, 0xd2, 0xd0, 0xcf, 0xb3, 0xdb, 0x5f, 0x52, 0xff, 0x21, 0xb7, 0xff, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x99, 0x49, 0x36, 0xdd, 0xeb, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	// Running will ```return``` a list of running processes that match the requested filter (or all).
	Running(ctx context.Context, in *RunningRequest, opts ...grpc.CallOption) (*RunningResponse, error)
	// Info provides information about a specific process.
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	// Logs returns log lines from the specified process.
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error)
	// Start creates a new process from the given request.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	// Stop terminates a specified process.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Environment allows setting default environment values for all processes started in the specified namespace.
	Environment(ctx context.Context, in *EnvironmentRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error)
	Image(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Running(ctx context.Context, in *RunningRequest, opts ...grpc.CallOption) (*RunningResponse, error) {
	out := new(RunningResponse)
	err := c.cc.Invoke(ctx, "/cynosure.API/Running", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/cynosure.API/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, "/cynosure.API/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/cynosure.API/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/cynosure.API/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Environment(ctx context.Context, in *EnvironmentRequest, opts ...grpc.CallOption) (*EnvironmentResponse, error) {
	out := new(EnvironmentResponse)
	err := c.cc.Invoke(ctx, "/cynosure.API/Environment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Image(ctx context.Context, in *ImageRequest, opts ...grpc.CallOption) (*ImageResponse, error) {
	out := new(ImageResponse)
	err := c.cc.Invoke(ctx, "/cynosure.API/Image", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	// Running will ```return``` a list of running processes that match the requested filter (or all).
	Running(context.Context, *RunningRequest) (*RunningResponse, error)
	// Info provides information about a specific process.
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	// Logs returns log lines from the specified process.
	Logs(context.Context, *LogsRequest) (*LogsResponse, error)
	// Start creates a new process from the given request.
	Start(context.Context, *StartRequest) (*StartResponse, error)
	// Stop terminates a specified process.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Environment allows setting default environment values for all processes started in the specified namespace.
	Environment(context.Context, *EnvironmentRequest) (*EnvironmentResponse, error)
	Image(context.Context, *ImageRequest) (*ImageResponse, error)
}

// UnimplementedAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (*UnimplementedAPIServer) Running(ctx context.Context, req *RunningRequest) (*RunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Running not implemented")
}
func (*UnimplementedAPIServer) Info(ctx context.Context, req *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedAPIServer) Logs(ctx context.Context, req *LogsRequest) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (*UnimplementedAPIServer) Start(ctx context.Context, req *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedAPIServer) Stop(ctx context.Context, req *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedAPIServer) Environment(ctx context.Context, req *EnvironmentRequest) (*EnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Environment not implemented")
}
func (*UnimplementedAPIServer) Image(ctx context.Context, req *ImageRequest) (*ImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Image not implemented")
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Running_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Running(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cynosure.API/Running",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Running(ctx, req.(*RunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cynosure.API/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cynosure.API/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Logs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cynosure.API/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cynosure.API/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Environment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Environment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cynosure.API/Environment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Environment(ctx, req.(*EnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Image_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Image(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cynosure.API/Image",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Image(ctx, req.(*ImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cynosure.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Running",
			Handler:    _API_Running_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _API_Info_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _API_Logs_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _API_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _API_Stop_Handler,
		},
		{
			MethodName: "Environment",
			Handler:    _API_Environment_Handler,
		},
		{
			MethodName: "Image",
			Handler:    _API_Image_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cyno.proto",
}
